// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserDataLayer;

namespace UserDataLayer.Migrations
{
    [DbContext(typeof(UserChatContext))]
    [Migration("20200521191928_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserDataLayer.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UserDataLayer.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("UserDataLayer.Models.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestedFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequesterFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestedFriendId");

                    b.HasIndex("RequesterFriendId");

                    b.ToTable("Frienships");
                });

            modelBuilder.Entity("UserDataLayer.Models.GroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("UserDataLayer.Models.MessageGroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AlreadyReceived")
                        .HasColumnType("bit");

                    b.Property<string>("CreatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageGroupUsers");
                });

            modelBuilder.Entity("UserDataLayer.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserDataLayer.Models.Friendship", b =>
                {
                    b.HasOne("UserDataLayer.User", "RequesterFriend")
                        .WithMany("RequestedFrienships")
                        .HasForeignKey("RequestedFriendId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UserDataLayer.User", "RequestedFriend")
                        .WithMany("ExternalFrienships")
                        .HasForeignKey("RequesterFriendId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("UserDataLayer.Models.GroupUser", b =>
                {
                    b.HasOne("UserDataLayer.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("UserDataLayer.User", "Member")
                        .WithMany("GroupsBridge")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("UserDataLayer.Models.MessageGroupUser", b =>
                {
                    b.HasOne("UserDataLayer.Models.GroupUser", "GroupUser")
                        .WithMany("Messages")
                        .HasForeignKey("GroupUserId");

                    b.HasOne("UserDataLayer.Message", "Message")
                        .WithMany("GroupUsers")
                        .HasForeignKey("MessageId");
                });
#pragma warning restore 612, 618
        }
    }
}
